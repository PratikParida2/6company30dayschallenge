class Solution {
    public int maxProfit(int k, int[] prices) 
    {
        //return solve(prices,0,1,k);
        int dp[][][]=new int[prices.length+1][3][k+1];
        for(int i=0;i<dp.length;i++)
        {
            for(int buy=0;buy<3;buy++)
            {
                for(int cap=0;cap<k+1;cap++)
                {
                    dp[i][buy][cap]=-1;
                }
            }
        }
        return memoization(prices,dp,0,1,k);
    }
    public static int solve(int prices[],int i,int buy,int cap)
    {
        if(i==prices.length || cap==0)
        return 0;
        int profit=0;
        if(buy==1)
        {
            profit=Math.max(-prices[i]+solve(prices,i+1,0,cap),0+solve(prices,i+1,1,cap));
        }
        else
        {
            profit=Math.max(prices[i]+solve(prices,i+1,1,cap-1),0+solve(prices,i+1,0,cap));
        }
        return profit;
    }
    public static int memoization(int prices[],int dp[][][],int i,int buy,int cap)
    {
        if(i==prices.length||cap==0)
        return 0;
        if(dp[i][buy][cap]!=-1)
        return dp[i][buy][cap];
        int profit=0;
        if(buy==1)
        {
            profit=Math.max(-prices[i]+memoization(prices,dp,i+1,0,cap),0+memoization(prices,dp,i+1,1,cap));
        }
        else
        {
            profit=Math.max(prices[i]+memoization(prices,dp,i+1,1,cap-1),0+memoization(prices,dp,i+1,0,cap));
        }
        return dp[i][buy][cap]=profit;
    }
}
